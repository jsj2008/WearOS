// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXAggregateTarget section */
		9069D08B0FCE185A0042E34C /* amalgamation */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = 9069D0900FCE18970042E34C /* Build configuration list for PBXAggregateTarget "amalgamation" */;
			buildPhases = (
				9069D08A0FCE185A0042E34C /* ShellScript */,
			);
			dependencies = (
			);
			name = amalgamation;
			productName = amalgamation;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		9069D0A30FCE1A4D0042E34C /* sqlite3.c in Sources */ = {isa = PBXBuildFile; fileRef = 9069D0A20FCE1A4D0042E34C /* sqlite3.c */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		9069D08E0FCE18790042E34C /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 08FB7793FE84155DC02AAC07 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 9069D08B0FCE185A0042E34C;
			remoteInfo = amalgamation;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXFileReference section */
		9069D0A20FCE1A4D0042E34C /* sqlite3.c */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.c; path = sqlite3.c; sourceTree = "<group>"; };
		D2AAC046055464E500DB518D /* libsqlcipher.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = libsqlcipher.a; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		D289987405E68DCB004EDB86 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		08FB7794FE84155DC02AAC07 /* sqlcipher */ = {
			isa = PBXGroup;
			children = (
				08FB7795FE84155DC02AAC07 /* Source */,
				C6A0FF2B0290797F04C91782 /* Documentation */,
				1AB674ADFE9D54B511CA2CBB /* Products */,
			);
			name = sqlcipher;
			sourceTree = "<group>";
		};
		08FB7795FE84155DC02AAC07 /* Source */ = {
			isa = PBXGroup;
			children = (
				9069D0A20FCE1A4D0042E34C /* sqlite3.c */,
			);
			name = Source;
			sourceTree = "<group>";
		};
		1AB674ADFE9D54B511CA2CBB /* Products */ = {
			isa = PBXGroup;
			children = (
				D2AAC046055464E500DB518D /* libsqlcipher.a */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		C6A0FF2B0290797F04C91782 /* Documentation */ = {
			isa = PBXGroup;
			children = (
			);
			name = Documentation;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXHeadersBuildPhase section */
		D2AAC043055464E500DB518D /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXHeadersBuildPhase section */

/* Begin PBXNativeTarget section */
		D2AAC045055464E500DB518D /* sqlcipher */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 1DEB91EB08733DB70010E9CD /* Build configuration list for PBXNativeTarget "sqlcipher" */;
			buildPhases = (
				D2AAC043055464E500DB518D /* Headers */,
				D2AAC044055464E500DB518D /* Sources */,
				D289987405E68DCB004EDB86 /* Frameworks */,
				462CA3C8142C7D33006FA944 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
				9069D08F0FCE18790042E34C /* PBXTargetDependency */,
			);
			name = sqlcipher;
			productName = sqlcipher;
			productReference = D2AAC046055464E500DB518D /* libsqlcipher.a */;
			productType = "com.apple.product-type.library.static";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		08FB7793FE84155DC02AAC07 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0410;
			};
			buildConfigurationList = 1DEB91EF08733DB70010E9CD /* Build configuration list for PBXProject "sqlcipher" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 1;
			knownRegions = (
				English,
				Japanese,
				French,
				German,
			);
			mainGroup = 08FB7794FE84155DC02AAC07 /* sqlcipher */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				D2AAC045055464E500DB518D /* sqlcipher */,
				9069D08B0FCE185A0042E34C /* amalgamation */,
			);
		};
/* End PBXProject section */

/* Begin PBXShellScriptBuildPhase section */
		462CA3C8142C7D33006FA944 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "# Version 2.0 (updated for Xcode 4, with some fixes)\n# Changes:\n#    - Works with xcode 4, even when running xcode 3 projects (Workarounds for apple bugs)\n#    - Faster / better: only runs lipo once, instead of once per recursion\n#    - Added some debugging statemetns that can be switched on/off by changing the DEBUG_THIS_SCRIPT variable to \"true\"\n#    - Fixed some typos\n# \n# Purpose:\n#   Create a static library for iPhone from within XCode\n#   Because Apple staff DELIBERATELY broke Xcode to make this impossible from the GUI (Xcode 3.2.3 specifically states this in the Release notes!)\n#   ...no, I don't understand why they did this!\n#\n# Author: Adam Martin - http://twitter.com/redglassesapps\n# Based on: original script from Eonil (main changes: Eonil's script WILL NOT WORK in Xcode GUI - it WILL CRASH YOUR COMPUTER)\n#\n# More info: see this Stack Overflow question: http://stackoverflow.com/questions/3520977/build-fat-static-library-device-simulator-using-xcode-and-sdk-4\n#################[ Tests: helps workaround any future bugs in Xcode ]########\n#\nDEBUG_THIS_SCRIPT=\"false\"\nif [ $DEBUG_THIS_SCRIPT = \"true\" ]\nthen\necho \"########### TESTS #############\"\necho \"Use the following variables when debugging this script; note that they may change on recursions\"\necho \"BUILD_DIR = $BUILD_DIR\"\necho \"BUILD_ROOT = $BUILD_ROOT\"\necho \"CONFIGURATION_BUILD_DIR = $CONFIGURATION_BUILD_DIR\"\necho \"BUILT_PRODUCTS_DIR = $BUILT_PRODUCTS_DIR\"\necho \"CONFIGURATION_TEMP_DIR = $CONFIGURATION_TEMP_DIR\"\necho \"TARGET_BUILD_DIR = $TARGET_BUILD_DIR\"\nfi\n#####################[ part 1 ]##################\n# First, work out the BASESDK version number (NB: Apple ought to report this, but they hide it)\n#    (incidental: searching for substrings in sh is a nightmare! Sob)\nSDK_VERSION=$(echo ${SDK_NAME} | grep -o '.\\{3\\}$')\n# Next, work out if we're in SIM or DEVICE\nif [ ${PLATFORM_NAME} = \"iphonesimulator\" ]\nthen\nOTHER_SDK_TO_BUILD=iphoneos${SDK_VERSION}\nelse\nOTHER_SDK_TO_BUILD=iphonesimulator${SDK_VERSION}\nfi\necho \"XCode has selected SDK: ${PLATFORM_NAME} with version: ${SDK_VERSION} (although back-targetting: ${IPHONEOS_DEPLOYMENT_TARGET})\"\necho \"...therefore, OTHER_SDK_TO_BUILD = ${OTHER_SDK_TO_BUILD}\"\n#\n#####################[ end of part 1 ]##################\n#####################[ part 2 ]##################\n#\n# IF this is the original invocation, invoke WHATEVER other builds are required\n#\n# Xcode is already building ONE target...\n#\n# ...but this is a LIBRARY, so Apple is wrong to set it to build just one.\n# ...we need to build ALL targets\n# ...we MUST NOT re-build the target that is ALREADY being built: Xcode WILL CRASH YOUR COMPUTER if you try this (infinite recursion!)\n#\n#\n# So: build ONLY the missing platforms/configurations.\nif [ \"true\" == ${ALREADYINVOKED:-false} ]\nthen\necho \"RECURSION: I am NOT the root invocation, so I'm NOT going to recurse\"\nelse\n# CRITICAL:\n# Prevent infinite recursion (Xcode sucks)\nexport ALREADYINVOKED=\"true\"\necho \"RECURSION: I am the root ... recursing all missing build targets NOW...\"\necho \"RECURSION: ...about to invoke: xcodebuild -configuration \\\"${CONFIGURATION}\\\" -target \\\"${TARGET_NAME}\\\" -sdk \\\"${OTHER_SDK_TO_BUILD}\\\" ${ACTION} RUN_CLANG_STATIC_ANALYZER=NO\"\nxcodebuild -configuration \"${CONFIGURATION}\" -target \"${TARGET_NAME}\" -sdk \"${OTHER_SDK_TO_BUILD}\" ${ACTION} RUN_CLANG_STATIC_ANALYZER=NO BUILD_DIR=\"${BUILD_DIR}\" BUILD_ROOT=\"${BUILD_ROOT}\"\nACTION=\"build\"\n#Merge all platform binaries as a fat binary for each configurations.\n# Calculate where the (multiple) built files are coming from:\nCURRENTCONFIG_DEVICE_DIR=\"../lib/emPATH-iphoneos\"   # ${SYMROOT}/${CONFIGURATION}-iphoneos\nCURRENTCONFIG_SIMULATOR_DIR=\"../lib/emPATH-iphonesimulator\" #${SYMROOT}/${CONFIGURATION}-iphonesimulator\necho \"Taking device build from: ../lib/Device\"  #${CURRENTCONFIG_DEVICE_DIR}\"\necho \"Taking simulator build from: ../lib/Simulator\" #${CURRENTCONFIG_SIMULATOR_DIR}\"\nCREATING_UNIVERSAL_DIR=\"../lib\"  #${SYMROOT}/${CONFIGURATION}-universal\necho \"...I will output a universal build to: ../lib\"  #${CREATING_UNIVERSAL_DIR}\"\n# ... remove the products of previous runs of this script\n#      NB: this directory is ONLY created by this script - it should be safe to delete!\n#rm -rf \"${CREATING_UNIVERSAL_DIR}\"\n#mkdir \"${CREATING_UNIVERSAL_DIR}\"\n#\necho \"lipo: for current configuration (${CONFIGURATION}) creating output file: ${CREATING_UNIVERSAL_DIR}/${EXECUTABLE_NAME}\"\nlipo -create -output \"${CREATING_UNIVERSAL_DIR}/${EXECUTABLE_NAME}\" \"${CURRENTCONFIG_DEVICE_DIR}/${EXECUTABLE_NAME}\" \"${CURRENTCONFIG_SIMULATOR_DIR}/${EXECUTABLE_NAME}\"\n#########\n#\n# Added: StackOverflow suggestion to also copy \"include\" files\n#    (untested, but should work OK)\n#\nif [ -d \"${CURRENTCONFIG_DEVICE_DIR}/usr/local/include\" ]\nthen\nmkdir -p \"${CREATING_UNIVERSAL_DIR}/usr/local/include\"\n# * needs to be outside the double quotes?\ncp \"${CURRENTCONFIG_DEVICE_DIR}/usr/local/include/\"* \"${CREATING_UNIVERSAL_DIR}/usr/local/include\"\nfi\nfi";
		};
		9069D08A0FCE185A0042E34C /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"$(SRCROOT)/sqlite3.c",
			);
			outputPaths = (
				"$(BUILT_PRODUCTS_DIR)/libsqlcipher.a",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "./configure --enable-tempstore=yes CC=/usr/bin/gcc CFLAGS=\"-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2\"\nmake sqlite3.c\nexit 0";
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		D2AAC044055464E500DB518D /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				9069D0A30FCE1A4D0042E34C /* sqlite3.c in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		9069D08F0FCE18790042E34C /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 9069D08B0FCE185A0042E34C /* amalgamation */;
			targetProxy = 9069D08E0FCE18790042E34C /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin XCBuildConfiguration section */
		1DEB91EC08733DB70010E9CD /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ARCHS = "$(ARCHS_STANDARD_32_BIT)";
				CONFIGURATION_BUILD_DIR = "$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)";
				COPY_PHASE_STRIP = NO;
				DEPLOYMENT_LOCATION = YES;
				DSTROOT = ..;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_MODEL_TUNING = G5;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_VERSION = "";
				HEADER_SEARCH_PATHS = "../OpenSSLXcode/openssl/include/**";
				INSTALL_PATH = "/lib/emPATH$(EFFECTIVE_PLATFORM_NAME)";
				IPHONEOS_DEPLOYMENT_TARGET = 5.1;
				MODULE_START = lib;
				ONLY_ACTIVE_ARCH = NO;
				OTHER_CFLAGS = (
					"-DSQLITE_HAS_CODEC",
					"-DNDEBUG",
					"-DSQLITE_TEMP_STORE=2",
				);
				OTHER_LDFLAGS = "";
				PRODUCT_NAME = sqlcipher;
				SDKROOT = iphoneos;
				SKIP_INSTALL = NO;
				SUPPORTED_PLATFORMS = "iphonesimulator iphoneos";
				SYMROOT = "";
				USER_HEADER_SEARCH_PATHS = "../OpenSSLXcode/openssl/include/**";
				VALID_ARCHS = "i386 armv6 armv7 armv7s";
			};
			name = Debug;
		};
		1DEB91ED08733DB70010E9CD /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ARCHS = "$(ARCHS_STANDARD_32_BIT)";
				CONFIGURATION_BUILD_DIR = "$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)";
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				DEPLOYMENT_LOCATION = YES;
				DSTROOT = ..;
				GCC_MODEL_TUNING = G5;
				GCC_VERSION = "";
				HEADER_SEARCH_PATHS = "../OpenSSLXcode/openssl/include/**";
				INSTALL_PATH = "/lib/emPATH$(EFFECTIVE_PLATFORM_NAME)";
				IPHONEOS_DEPLOYMENT_TARGET = 5.1;
				MODULE_START = lib;
				ONLY_ACTIVE_ARCH = NO;
				OTHER_CFLAGS = (
					"-DSQLITE_HAS_CODEC",
					"-DNDEBUG",
					"-DSQLITE_OS_UNIX=1",
					"-DSQLITE_TEMP_STORE=2",
				);
				OTHER_LDFLAGS = "";
				PRODUCT_NAME = sqlcipher;
				SDKROOT = iphoneos;
				SKIP_INSTALL = NO;
				SUPPORTED_PLATFORMS = "iphonesimulator iphoneos";
				SYMROOT = "";
				USER_HEADER_SEARCH_PATHS = "../OpenSSLXcode/openssl/include/**";
				VALID_ARCHS = "i386 armv6 armv7 armv7s";
			};
			name = Release;
		};
		1DEB91F008733DB70010E9CD /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_32_64_BIT)";
				CONFIGURATION_BUILD_DIR = "$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)";
				CONFIGURATION_TEMP_DIR = "";
				DEPLOYMENT_LOCATION = YES;
				DSTROOT = ..;
				GCC_C_LANGUAGE_STANDARD = c99;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_WARN_ABOUT_RETURN_TYPE = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				INSTALL_PATH = "/lib/emPATH$(EFFECTIVE_PLATFORM_NAME)";
				ONLY_ACTIVE_ARCH = NO;
				SKIP_INSTALL = NO;
				SUPPORTED_PLATFORMS = "iphonesimulator macosx iphoneos";
				SYMROOT = "";
				VALID_ARCHS = "i386 armv6 armv7";
			};
			name = Debug;
		};
		1DEB91F108733DB70010E9CD /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_32_64_BIT)";
				CONFIGURATION_BUILD_DIR = "$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)";
				CONFIGURATION_TEMP_DIR = "";
				DEPLOYMENT_LOCATION = YES;
				DSTROOT = ..;
				GCC_C_LANGUAGE_STANDARD = c99;
				GCC_WARN_ABOUT_RETURN_TYPE = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				INSTALL_PATH = "/lib/emPATH$(EFFECTIVE_PLATFORM_NAME)";
				ONLY_ACTIVE_ARCH = NO;
				SKIP_INSTALL = NO;
				SUPPORTED_PLATFORMS = "iphonesimulator macosx iphoneos";
				SYMROOT = "";
				VALID_ARCHS = "i386 armv6 armv7";
			};
			name = Release;
		};
		466328F913EB44AA00823A46 /* Distribution */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_32_64_BIT)";
				CONFIGURATION_BUILD_DIR = "$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)";
				CONFIGURATION_TEMP_DIR = "";
				DEPLOYMENT_LOCATION = YES;
				DSTROOT = ..;
				GCC_C_LANGUAGE_STANDARD = c99;
				GCC_WARN_ABOUT_RETURN_TYPE = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				INSTALL_PATH = "/lib/emPATH$(EFFECTIVE_PLATFORM_NAME)";
				ONLY_ACTIVE_ARCH = NO;
				SKIP_INSTALL = NO;
				SUPPORTED_PLATFORMS = "iphonesimulator macosx iphoneos";
				SYMROOT = "";
				VALID_ARCHS = "i386 armv6 armv7";
			};
			name = Distribution;
		};
		466328FA13EB44AA00823A46 /* Distribution */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ARCHS = "$(ARCHS_STANDARD_32_BIT)";
				CONFIGURATION_BUILD_DIR = "$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)";
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				DEPLOYMENT_LOCATION = YES;
				DSTROOT = ..;
				GCC_MODEL_TUNING = G5;
				GCC_VERSION = "";
				HEADER_SEARCH_PATHS = "../OpenSSLXcode/openssl/include/**";
				INSTALL_PATH = "/lib/emPATH$(EFFECTIVE_PLATFORM_NAME)";
				IPHONEOS_DEPLOYMENT_TARGET = 5.1;
				MODULE_START = lib;
				ONLY_ACTIVE_ARCH = NO;
				OTHER_CFLAGS = (
					"-DSQLITE_HAS_CODEC",
					"-DNDEBUG",
					"-DSQLITE_OS_UNIX=1",
					"-DSQLITE_TEMP_STORE=2",
				);
				OTHER_LDFLAGS = "";
				PRODUCT_NAME = sqlcipher;
				SDKROOT = iphoneos;
				SKIP_INSTALL = NO;
				SUPPORTED_PLATFORMS = "iphonesimulator iphoneos";
				SYMROOT = "";
				USER_HEADER_SEARCH_PATHS = "../OpenSSLXcode/openssl/include/**";
				VALID_ARCHS = "i386 armv6 armv7 armv7s";
			};
			name = Distribution;
		};
		466328FB13EB44AA00823A46 /* Distribution */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				COPY_PHASE_STRIP = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				PRODUCT_NAME = amalgamation;
				ZERO_LINK = NO;
			};
			name = Distribution;
		};
		9069D08C0FCE185A0042E34C /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				COPY_PHASE_STRIP = NO;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_OPTIMIZATION_LEVEL = 0;
				PRODUCT_NAME = amalgamation;
			};
			name = Debug;
		};
		9069D08D0FCE185A0042E34C /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				COPY_PHASE_STRIP = YES;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				PRODUCT_NAME = amalgamation;
				ZERO_LINK = NO;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		1DEB91EB08733DB70010E9CD /* Build configuration list for PBXNativeTarget "sqlcipher" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				1DEB91EC08733DB70010E9CD /* Debug */,
				1DEB91ED08733DB70010E9CD /* Release */,
				466328FA13EB44AA00823A46 /* Distribution */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		1DEB91EF08733DB70010E9CD /* Build configuration list for PBXProject "sqlcipher" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				1DEB91F008733DB70010E9CD /* Debug */,
				1DEB91F108733DB70010E9CD /* Release */,
				466328F913EB44AA00823A46 /* Distribution */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		9069D0900FCE18970042E34C /* Build configuration list for PBXAggregateTarget "amalgamation" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				9069D08C0FCE185A0042E34C /* Debug */,
				9069D08D0FCE185A0042E34C /* Release */,
				466328FB13EB44AA00823A46 /* Distribution */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 08FB7793FE84155DC02AAC07 /* Project object */;
}
